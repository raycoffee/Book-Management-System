name: CI/CD Pipeline to GCE

on:
  push:
    branches: [ main ]

env:
  REGISTRY: asia-south1-docker.pkg.dev
  DOCKER_REPO: docker-repo
  GCE_ZONE: asia-south1-a
  GCE_INSTANCE: book-management-vm

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set version
      id: set-version
      run: echo "version=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

    - name: Google Auth
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCLOUD_SERVICE_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker authentication
      run: |
        gcloud auth configure-docker ${{ env.REGISTRY }} --quiet

    - name: Build and push images
      run: |
        docker build -t "${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_REPO }}/client:${{ steps.set-version.outputs.version }}" ./client
        docker push "${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_REPO }}/client:${{ steps.set-version.outputs.version }}"
        docker build -t "${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_REPO }}/server:${{ steps.set-version.outputs.version }}" ./server
        docker push "${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_REPO }}/server:${{ steps.set-version.outputs.version }}"

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Google Auth
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCLOUD_SERVICE_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Create deploy script
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        
        # Stop and remove existing containers (ignore errors)
        sudo docker stop client 2>/dev/null || true
        sudo docker rm client 2>/dev/null || true
        sudo docker stop server 2>/dev/null || true
        sudo docker rm server 2>/dev/null || true
        
        # Configure docker authentication
        sudo gcloud auth configure-docker asia-south1-docker.pkg.dev --quiet
        
        # Set the full image names
        CLIENT_IMAGE="asia-south1-docker.pkg.dev/$1/docker-repo/client:$2"
        SERVER_IMAGE="asia-south1-docker.pkg.dev/$1/docker-repo/server:$2"
        
        # Pull and run new containers
        sudo docker run -d --name client -p 80:80 "${CLIENT_IMAGE}"
        sudo docker run -d --name server -p 3001:3001 "${SERVER_IMAGE}"
        EOF

    - name: Deploy to VM
      run: |
        # Copy the script to the VM
        gcloud compute scp deploy.sh ${{ env.GCE_INSTANCE }}:~/deploy.sh --zone=${{ env.GCE_ZONE }}
        
        # Make script executable and run it
        gcloud compute ssh ${{ env.GCE_INSTANCE }} --zone=${{ env.GCE_ZONE }} --command="
        chmod +x ~/deploy.sh && 
        ~/deploy.sh '${{ secrets.GCP_PROJECT_ID }}' '${{ needs.build.outputs.version }}'"