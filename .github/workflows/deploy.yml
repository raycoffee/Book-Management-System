name: CI/CD Pipeline to GCE

on:
  push:
    branches: [ main ]

env:
  REGISTRY: asia-south1-docker.pkg.dev
  DOCKER_REPO: docker-repo
  GCE_ZONE: asia-south1-a
  GCE_INSTANCE: book-management-vm

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set version
      id: set-version
      run: echo "version=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v1.1.1
      with:
        credentials_json: '${{ secrets.GCLOUD_SERVICE_KEY }}'
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1.1.1
      with:
        install_components: 'beta'

    - name: Configure Docker authentication
      run: |
        gcloud auth configure-docker ${{ env.REGISTRY }} --quiet

    - name: Build and push images
      run: |
        docker build \
          --build-arg REACT_APP_API_URL="${{ secrets.REACT_APP_API_URL }}" \
          -t "${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_REPO }}/client:${{ steps.set-version.outputs.version }}" \
          ./client
        docker push "${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_REPO }}/client:${{ steps.set-version.outputs.version }}"
        
        docker build \
          --build-arg DATABASE="${{ secrets.DATABASE }}" \
          --build-arg DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
          --build-arg JWT_SECRET="${{ secrets.JWT_SECRET }}" \
          --build-arg REFRESH_TOKEN_SECRET="${{ secrets.REFRESH_TOKEN_SECRET }}" \
          --build-arg GOOGLE_API_KEY="${{ secrets.GOOGLE_API_KEY }}" \
          --build-arg PORT="${{ secrets.PORT }}" \
          -t "${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_REPO }}/server:${{ steps.set-version.outputs.version }}" \
          ./server
        docker push "${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_REPO }}/server:${{ steps.set-version.outputs.version }}"

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v1.1.1
      with:
        credentials_json: '${{ secrets.GCLOUD_SERVICE_KEY }}'
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1.1.1
      with:
        install_components: 'beta'

    - name: Create deploy script
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e

        echo "Cleaning up existing containers and processes..."
        
        # Kill any process using port 3001
        sudo lsof -t -i:3001 | xargs -r sudo kill -9 || true
        
        # Kill any process using port 80
        sudo lsof -t -i:80 | xargs -r sudo kill -9 || true
        
        # Stop and remove existing containers
        sudo docker stop client 2>/dev/null || true
        sudo docker rm client 2>/dev/null || true
        sudo docker stop server 2>/dev/null || true
        sudo docker rm server 2>/dev/null || true
        
        # Configure docker authentication
        sudo gcloud auth configure-docker asia-south1-docker.pkg.dev --quiet
        
        # Set the full image names
        CLIENT_IMAGE="asia-south1-docker.pkg.dev/$1/docker-repo/client:$2"
        SERVER_IMAGE="asia-south1-docker.pkg.dev/$1/docker-repo/server:$2"
        
        echo "Starting new containers..."
        
        # Pull and run new containers with environment variables
        echo "Starting client..."
        sudo docker run -d --name client \
          -p 80:80 \
          "${CLIENT_IMAGE}"
        
        echo "Starting server..."
        sudo docker run -d --name server \
          -p 3001:3001 \
          -e DATABASE='${{ secrets.DATABASE }}' \
          -e DATABASE_PASSWORD='${{ secrets.DATABASE_PASSWORD }}' \
          -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
          -e REFRESH_TOKEN_SECRET='${{ secrets.REFRESH_TOKEN_SECRET }}' \
          -e GOOGLE_API_KEY='${{ secrets.GOOGLE_API_KEY }}' \
          -e PORT='${{ secrets.PORT }}' \
          "${SERVER_IMAGE}"
        
        echo "Deployment complete!"
        EOF

    - name: Deploy to VM
      run: |
        # Copy the script to the VM
        gcloud compute scp deploy.sh ${{ env.GCE_INSTANCE }}:~/deploy.sh --zone=${{ env.GCE_ZONE }}
        
        # Make script executable and run it
        gcloud compute ssh ${{ env.GCE_INSTANCE }} --zone=${{ env.GCE_ZONE }} --command="
        chmod +x ~/deploy.sh && 
        ~/deploy.sh '${{ secrets.GCP_PROJECT_ID }}' '${{ needs.build.outputs.version }}'"